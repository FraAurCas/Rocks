import javafx.animation.*;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.*;
import javafx.geometry.Insets;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.*;
import javafx.util.Duration;
import javafx.scene.input.MouseEvent;
import javafx.beans.property.SimpleBooleanProperty;

public class GraphicsHandler extends Application{
    public void start(Stage primaryStage){

        final int FPS = 60;
        final int X_LEN = 300; //How many spaces wide the world is
        final int Y_LEN = 200; //How many spaces tall the world is
        final int EDGE_LEN = 5; //How many pixels each material is graphically displayed as

        SimArea sim = new SimArea(X_LEN, Y_LEN);

        ObservableList<String> materials =
            FXCollections.observableArrayList( //New material names need to be added here. Also need to be added in the switch statement
                "Dirt",
                "Water",
                "Custom (WIP)"
            );
        final ComboBox selection = new ComboBox(materials);
        selection.setValue("Dirt");




        VBox vbox = new VBox();              //The main VBox, contains the visual display at top and GUI at bottom
            Pane pane = new Pane();            //Where the actual simulation occurs.
                pane.setPickOnBounds(true);
/*                pane.setOnMousePressed(e -> {


                    if (e.isPrimaryButtonDown()) {
                      int x = (int)e.getX()/EDGE_LEN;
                      int y = (int)e.getY()/EDGE_LEN;
                    //  System.out.println("Ayo");
                      //Timeline timeline = new Timeline(new KeyFrame(Duration.millis(1000/60), (ActionEvent event) -> {

                      Material m = null;

                      switch ((String)selection.getValue()) {
                          case "Dirt":
                              m = new Dirt(sim, (int)e.getX()/EDGE_LEN, (int)e.getY()/EDGE_LEN);
                              break;
                          case "Water":
                              m = new Water(sim, (int)e.getX()/EDGE_LEN, (int)e.getY()/EDGE_LEN);
                              break;
                          case "Custom (WIP)":
                              return;
                      }
                      sim.add(m, x, y);

                      //}));
                      //timeline.setCycleCount(Timeline.INDEFINITE);
                      //timeline.play();

                    }

                });
                */

                SimpleBooleanProperty simpleBooleanProperty = new SimpleBooleanProperty();

            pane.setOnMousePressed(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {
                    simpleBooleanProperty.setValue(true);
                }
            });

            pane.setOnMouseReleased(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {
                    simpleBooleanProperty.setValue(false);
                }
            });


            pane.setOnMouseMoved(new EventHandler<MouseEvent>() {
                @Override

                public void handle(MouseEvent event) {
                    System.out.println('a');
                if(simpleBooleanProperty.getValue()){
                  System.out.println('b');
                  int x = (int)event.getX()/EDGE_LEN;
                  int y = (int)event.getY()/EDGE_LEN;

                  Material m = null;

                  switch ((String)selection.getValue()) {
                      case "Dirt":
                          m = new Dirt(sim, x, y);
                          break;
                      case "Water":
                          m = new Water(sim, x, y);
                          break;
                      case "Custom (WIP)":
                          return;
                  }
                  sim.add(m, x, y);

                }
                else{
                  System.out.println('c');
                }
              }

              });
                pane.setPrefSize(X_LEN * EDGE_LEN, Y_LEN * EDGE_LEN);
                pane.setBorder(new Border(new BorderStroke(Color.BLACK, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderStroke.MEDIUM)));

            HBox hbox = new HBox();             //Will be used to add buttons and things later
                hbox.getChildren().addAll(new Text("Material: "), selection, new Text("Amount per left-click: "), amount);
                hbox.setPadding(new Insets(20, 60, 20, 60));
                hbox.setSpacing(10);
        vbox.getChildren().addAll(pane, hbox);
        vbox.setPadding(new Insets(20, 20, 20, 20));

        final Scene scene = new Scene(vbox); //Display setup
        primaryStage.setResizable(false);    //Don't resize cause thats a lot of work
        primaryStage.setTitle("Rocks");                 //Title
        primaryStage.setScene(scene);
        primaryStage.show();

        final Timeline loop = new Timeline(new KeyFrame(Duration.millis(1000 / FPS), t -> { //Draws SimArea to the screen
            sim.simulate();
            pane.getChildren().clear();

            for (int x = 0; x < sim.getXLen(); x++) {
                for (int y = 0; y < sim.getYLen(); y++) {
                    Material m = sim.getMaterial(x, y);
                    if (m != null) {
                        Rectangle r = new Rectangle(x * EDGE_LEN, y * EDGE_LEN, EDGE_LEN, EDGE_LEN);
                        r.setFill(m.getColor());
                        pane.getChildren().add(r);
                    }
                }
            }
        }));

        loop.setCycleCount(Timeline.INDEFINITE);
        loop.play();
    }

    public static void main(final String[] args) {
        launch(args);
    };
}
